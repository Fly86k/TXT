TXT
 1. Создать внешний репозиторий c названием TXT ======= github.com->repositories->press "New"->giving name to repository-> click on "Create repository"
 2. Клонировать репозиторий TXT на локальный компьютер. ==== GitHub->  $ cd /d/QA_Training/git/GIT_HUB
 3. Внутри локального TXT создать файл “new.txt”. ====$ cd TXT/
													  $ touch new.txt
 4. Добавить файл под гит. ==== $ git add new.txt
 5. Закоммитить файл. === $ git status (видим что наш файл "new.txt" проиндексирован)
			  $ git commit -m "указываем комментарий"
 6. Отправить файл на внешний GitHub репозиторий.=== $ git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе 
	(ФИО, возраст, количество домашних животных, будущая желаемая зарплата).     
	Всё написать в формате TXT. ===== $ cat > new.txt
					    ФИО - Филь Игорь Васильевич
					    Возраст - 35	
					    Кол-во домашних животных - 1
					    Будущая желаемая ЗП - 120 000
					    Ctr+C
 8. Отправить изменения на внешний репозиторий.== $ git status
						  $ git add new.txt
						  $ git commit -m "add info"
						  $ git push
 9. Создать файл preferences.txt === $ touch preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях 
     (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить)в формате TXT.  
	$ cat >> preferences.txt
	>**Любимый фильм - Терминатор**  
	>**Любимый сериал - МосГаз**  
	>**Еда - Утка по Пекински**  
	>**Время года - Лето**  
	>**Страна - Уругвай*
						   
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT == $ cat > skills.txt
																										  									 1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
													 2. Что такое клиент-серверная архитектура.  
													 3. HTTP Методы запросов на сервер.  
													 4. Коды ответов HTTP сервера.  
													 5. Структуры HTTP запросов и ответов.  
													 6. Что такое JSON, XML. Их структура.  
													 7. Тестирование API через Postman (JS, автотесты API).  
													 8. Снятие и чтение логов c внешнего сервера.  
													 9. Снифинг http web трафика через Charles и Fiddler.  
													10. Dev Tools веб браузеров (Google Chrome, FireFox).  
													11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)  												12. Мобильное тестирование.  
													13. Особенность iOS, Android, гайдлайны.  
													14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)  											       15. Сборка Android приложений на Android Studio.  
													16. ADB (управление андройд девайсами).  
													17. Настройка прокси и vpn на iOS и Android.  
													18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.  												  19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)  						  20. Основы bash скриптинг, автоматизация рутинных задач на сервере.  
													21. Доступ к удалённым серверам.  
													22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).  												23. База данных Postgres (установка, настройка и использование).  
													24. Нереляционная база данных Redis (установка, настройка и использование).  											    25. Нагрузочное тестирование в Jmeter.  
													26. Методология разработки Scrum.  
													27. Python. (Изучение основ. Создание клиент серверного приложения)
 12. Сделать коммит в одну строку.=== $ git add preferences.txt
				      $ git commit -m preferences.txt
 13. Отправить сразу 2 файла на внешний репозиторий. === $ git push
 14. На веб интерфейсе создать файл bug_report.txt. === в созданном репозитори клик "Add file" -> "Create new file" -> присваивавеи файлу ИМЯ bug_report.txt 
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.=== ->click на "Commit new file"
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.=== в выбранном файле bug_report.txt клик на "Edit this file"
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.=== Внизу страницы клик на "Commit cghanges"
 18. Синхронизировать внешний и локальный репозиторий TXT === $ git pull
 * Saved as Fil_HW_TXT.txt
